import { useState } from "react";
import { Button } from "@/shared/ui-kit/button";
import type { Route } from "@/core/entities/types";
import { Loader2 } from "lucide-react";

type RouteListProps = {
  list: Route[];
  isLoading: boolean;
  error?: string | null;
  onCreate: () => void;
  onEdit: (route: Route) => void;
  onToggle: (id: string) => Promise<void | null>;
  onRemove: (id: string) => Promise<void | null>;
  isRemoving: boolean;
};

export function RouteList({
  list,
  isLoading,
  error,
  onCreate,
  onEdit,
  onToggle,
  onRemove,
  isRemoving,
}: RouteListProps) {
  // üîπ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∫–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è
  const [activeRemoveId, setActiveRemoveId] = useState<string | null>(null);

  // –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (!isRemoving && activeRemoveId !== null) {
    setTimeout(() => setActiveRemoveId(null), 0);
  }

  return (
    <div className="bg-gray-800 rounded-lg shadow p-4 text-gray-200">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">–°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤</h2>
        <Button onClick={onCreate}>–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</Button>
      </div>

      {isLoading && <div className="text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
      {error && <div className="text-red-400">{error}</div>}

      {!isLoading && !error && (
        <table className="min-w-full divide-y divide-gray-700">
          <thead className="bg-gray-700 text-gray-300">
            <tr>
              <th className="px-6 py-3 text-left text-xs">–î–æ–º–µ–Ω</th>
              <th className="px-6 py-3">–ü–æ—Ä—Ç</th>
              <th className="px-6 py-3">–¢–∏–ø</th>
              <th className="px-6 py-3">–°—Ç–∞—Ç—É—Å</th>
              <th className="px-6 py-3">–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-700">
            {list.map((route) => (
              <tr key={route.id}>
                <td className="px-6 py-4">{route.domain}</td>
                <td className="px-6 py-4">{route.port}</td>
                <td className="px-6 py-4">
                  {route.proxy_pass ? "–ü—Ä–æ–∫—Å–∏" : "–°—Ç–∞—Ç–∏–∫–∞"}
                </td>
                <td className="px-6 py-4">
                  <span
                    className={`px-2 inline-flex text-xs rounded-full ${
                      route.enabled
                        ? "bg-green-700 text-green-200"
                        : "bg-red-700 text-red-200"
                    }`}
                  >
                    {route.enabled ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω"}
                  </span>
                </td>
                <td className="px-6 py-4 space-x-3 text-sm">
                  <button
                    onClick={() => onToggle(route.id)}
                    disabled={isRemoving}
                    className="text-yellow-400 hover:text-yellow-200 disabled:opacity-60"
                  >
                    {route.enabled ? "–û—Ç–∫–ª—é—á–∏—Ç—å" : "–í–∫–ª—é—á–∏—Ç—å"}
                  </button>

                  <button
                    onClick={() => onEdit(route)}
                    disabled={isRemoving}
                    className="text-blue-400 hover:text-blue-200 disabled:opacity-60"
                  >
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </button>

                  <button
                    onClick={() => {
                      setActiveRemoveId(route.id);
                      onRemove(route.id);
                    }}
                    disabled={isRemoving}
                    className={`
                      flex items-center justify-end w-28
                      text-red-400 hover:text-red-200
                      disabled:opacity-60
                    `}
                  >
                    {isRemoving && activeRemoveId === route.id ? (
                      <>
                        <Loader2 className="mr-1 h-4 w-4 animate-spin" />
                        –£–¥–∞–ª–µ–Ω–∏–µ...
                      </>
                    ) : (
                      <span className="ml-auto text-right w-full">–£–¥–∞–ª–∏—Ç—å</span>
                    )}
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
